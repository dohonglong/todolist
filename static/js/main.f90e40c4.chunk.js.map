{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","description","todo","setTodo","todos","setTodos","className","placeholder","name","value","onChange","event","target","onClick","map","index","row","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OA0CeA,MAvCf,WACE,MAAwBC,mBAAS,CAACC,YAAa,KAA/C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BH,mBAAS,IAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAkBA,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAOC,YAAY,cAAcC,KAAK,cAAcC,MAAOP,EAAKD,YAAaS,SAjB5D,SAACC,GACpBR,EAAQ,2BAAID,GAAL,kBAAYS,EAAMC,OAAOJ,KAAOG,EAAMC,OAAOH,YAiBlD,wBAAQI,QAbI,WACdR,EAAS,GAAD,mBAAKD,GAAL,CAAYF,KACpBC,EAAQ,CAACF,YAAa,MAWpB,iBACA,gCACE,gCAEIG,EAAMU,KAAI,SAACZ,EAAMa,GAAP,OACR,+BACE,6BAAKb,EAAKD,cACV,6BAAI,wBAAQY,QAAS,kBAdfG,EAcgCD,OAblDV,EAASD,EAAMa,QAAO,SAACf,EAAMa,GAAP,OAAiBA,IAAUC,MADhC,IAACA,GAcF,wBAFGD,cCnBRG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f90e40c4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [todo, setTodo] = useState({description: ''}); //State for todo\n  const [todos, setTodos] = useState([]); //State where all todos are saved\n\n  //Invoke function that saves typed values into the todo state\n  const inputChanged = (event) => {\n    setTodo({...todo, [event.target.name]: event.target.value});\n  }\n\n  //Invoke function that adds newly-typed todo into the todos state array\n  const addTodo = () => {\n    setTodos([...todos, todo]);\n    setTodo({description: ''}); //Clear input when a new todo has been\n  }\n\n  //Delete ToDo\n  const deleteTodo = (row) => {\n    setTodos(todos.filter((todo, index) => index !== row));\n  }\n\n  return (\n    <div className=\"App\">\n      <input placeholder=\"Description\" name=\"description\" value={todo.description} onChange={inputChanged} />\n      <button onClick={addTodo}>Add</button> \n      <table>\n        <tbody>\n          {\n            todos.map((todo, index) => \n              <tr key={index}>\n                <td>{todo.description}</td>\n                <td><button onClick={() => deleteTodo(index)}>Delete</button></td>\n              </tr>)\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}